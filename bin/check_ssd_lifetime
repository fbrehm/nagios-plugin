#!/bin/bash

shopt -s extglob

PROGNAME="${0##*/}"
PROGPATH="${0%/*}"
REVISION="0.1.2"

# ProfitBricks checks are in /usr/lib/nagios/plugins/pb
UTILS="${PROGPATH}/pb_utils.sh"
if ! [[ -e ${UTILS} ]]; then
    echo "File '${UTILS}' does not exist, aborting!"
    exit 1
fi
. ${UTILS}

megaraid=false
verbose=0
device=''
bus_nr=''
warning_level=10
critical_level=5

# some funcions
print_usage() {
    echo "Usage: ${PROGNAME} -d DEVICE"
    echo "       [-w|--warning WARNING_LEVEL] [-c|--critical CRITICAL_LEVEL] -d DEVICE"
    echo "       [-v|--verbose]"
    echo ""
    echo "  DEVICE           device to be checked, e.g. sda"
    echo "  WARNING_LEVEL    default: ${warning_level}"
    echo "  CRITICAL_LEVEL   default: ${critical_level}"
}

print_help() {
    print_revision ${PROGNAME} ${REVISION}
    echo ""
    print_usage
    echo ""
    echo "This plugin checks the wear level (lifetime) indicated by the"
    echo "smart value of \"233 Media_Wearout_Indicator\" of the disk."
    echo ""
    support
    exit ${STATE_OK}
}

print_verbose() {
    [[ ${verbose} -eq 1 ]] && echo $@
}

# needs to be run as root
if [[ ${EUID} != 0 ]]; then
    echo "Needs to be run with root priviledges!"
    exit ${STATE_UNKNOWN}
fi

# check if any arguments where given
if [[ $# -eq 0 ]]; then
    print_help
    exit ${STATE_UNKNOWN}
fi

# process arguments
while [[ $# -ne 0 ]]; do
    case "$1" in
        -h|--help)
            print_help
            exit ${STATE_OK}
            ;;
        -w|--warning)
            if [[ -n $2 ]]; then
                warning_level=$2
                shift
            else
                echo "Missing WARNING value!"
                exit ${STATE_UNKNOWN}
            fi
            ;;
        --warning=?*)
            warning_level=${1#*=}
            ;;
        --warning=)
            echo "Missing WARNING value!"
            exit ${STATE_UNKNOWN}
            ;;
        -c|--critical)
            if [[ -n $2 ]]; then
                critical_level=$2
                shift
            else
                echo "Missing CRITICAL value!"
                exit ${STATE_UNKNOWN}
            fi
            ;;
        --critical=?*)
            critical_level=${1#*=}
            ;;
        --critical=)
            echo "Missing CRITICAL value!"
            exit ${STATE_UNKNOWN}
            ;;
        -d|--device)
            if [[ -n $2 ]]; then
                device=$2
                shift
            else
                echo "Missing DEVICE value!"
                exit ${STATE_UNKNOWN}
            fi
            ;;
        --device=?*)
            device=${1#*=}
            ;;
        --device=)
            echo "Missing DEVICE value!"
            exit ${STATE_UNKNOWN}
            ;;
        -V|--version)
            print_revision ${PROGNAME} ${REVISION}
            exit ${STATE_OK}
            ;;
        -v|--verbose)
            verbose=1
            shift
            ;;
        --) # End of all options.
            shift
            break
            ;;
        -?*)
            echo "WARN: Unknown option (ignored): '$1'" >&2
            ;;
        *)               # Default case: If no more options then break out of the loop.
            break
    esac

    shift
done

# check prerequisites
if ! which smartctl >/dev/null; then
    echo "UNKNOWN: Command 'smartctl' not found!"
    exit ${STATE_UNKNOWN}
fi

# do some argument checking
if ! [[ ${warning_level} =~ ^[1-9][0-9]?$|^100$ ]]; then
#if ! [[ ${warning_level} =~ ^[1-9][0-9]?$ ]]; then
    echo "UNKNOWN: WARNING_level is not in range 1..100!"
    exit ${STATE_UNKNOWN}
fi
if ! [[ ${critical_level} =~ ^[1-9][0-9]?$|^100$ ]]; then
#if ! [[ ${critical_level} =~ ^[1-9][0-9]$ ]]; then
    echo "UNKNOWN: CRITICAL_level is not in range 1..100!"
    exit ${STATE_UNKNOWN}
fi
if [[ ${warning_level} -gt 100 ]]; then
    echo "UNKNOWN: WARNING_level >100!" >&2
    exit ${STATE_UNKNOWN}
fi
if [[ ${critical_level} -gt 100 ]]; then
    echo "UNKNOWN: CRITICAL_level >100!" >&2
    exit ${STATE_UNKNOWN}
fi

# deactivate temporarily because this makes updating easier
# until now we had percentage thresholds so warning threshold was less
# then critical
#if [[ ${warning_level} -lt ${critical_level} ]]; then
#    echo "UNKNOWN: Warning threshold (${warning_level} is less than critical (${critical_level})!"
#    exit ${STATE_UNKNOWN}
#fi

# check for megaraid device
if [[ ${device} =~ ^[0-9]*$ ]]; then
    megaraid=true
    # a (megaraid) device id was given
    megaraid_did=${device}
    disk_type=$(storcli /call/eall/sall show | awk '{print $2, $8}' | grep -w "^${device}" | awk '{print $2}' | tr ':' ' ')
    if [[ ${disk_type} != SSD ]]; then
        echo "UNKNOWN: Device '${device}' is not a SSD"
        exit ${STATE_UNKNOWN}
    fi
    bus_nr=`lsscsi -H | awk '$2 ~ /^megaraid_sas$/ {gsub ( /\[/, "" ); gsub ( /\]/, "" ); print $1}'`
    device='/dev/bus/'${bus_nr}
elif [[ ${device} =~ ^[0-9]+:[0-9]+$ ]]; then
    megaraid=true
    # a (megaraid) device "enclosure:slot" was given
    # get EID:Slot
    read eid slot <<< $(echo ${device/:/ })
    # --------------------------------------------------------------------------
    # EID:Slt DID State DG     Size Intf Med SED PI SeSz Model               Sp 
    # --------------------------------------------------------------------------
    # 0:0       6 Onln  10 2.727 TB SATA HDD N   N  512B ST3000NM0033-9ZM178 U  
    # --------------------------------------------------------------------------
    read megaraid_did disk_type <<< $(storcli /call/e${eid}/s${slot} show | grep -w ${device} | awk '{print $2, $8}')
    if [[ ${disk_type} != SSD ]]; then
        echo "UNKNOWN: Device '${device}' is not a SSD"
        exit ${STATE_UNKNOWN}
    fi
    bus_nr=`lsscsi -H | awk '$2 ~ /^megaraid_sas$/ {gsub ( /\[/, "" ); gsub ( /\]/, "" ); print $1}'`
    device='/dev/bus/'${bus_nr}
elif ! [[ ${device} =~ ^/dev/ ]]; then
    # "normal" block was given
    device="/dev/${device}"
    # check existence of DEVICE
    if ! [[ -e /sys/block/${device##*/} ]]; then
        echo "UNKNOWN: Could not find device '${device##*/}' (/sys/block/${device##*/})!"
        exit ${STATE_UNKNOWN}
    fi
fi

# check if device is a virtual drive
if ! ${megaraid}; then
    read disk_model < /sys/block/${device##*/}/device/model
    if [[ ${disk_model} =~ ^LSI ]] || [[ ${disk_model} =~ ^AVAGO ]]; then
        echo "UNKNOWN: Device '${device}' is a megaraid virtual drive!"
        exit ${STATE_UNKNOWN}
    fi
fi

# build smartctl command
# relevant output looks like (without first line):
# ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE
# 233 Media_Wearout_Indicator 0x0032   082   082   000    Old_age   Always       -       0
if ${megaraid}; then
    cwi=$(smartctl -a -d megaraid,${megaraid_did} ${device} | grep ^233 | awk '{print $4}')
else
    cwi=$(smartctl -a ${device} | grep ^233 | awk '{print $4}')
fi
# remove leading zeros
current_wearout_indicator=${cwi##+(0)}

# check the thresholds
if [[ ${current_wearout_indicator} -le ${critical_level} ]]; then
    echo "CRITICAL: current wear level: ${current_wearout_indicator} | wear_level=${current_wearout_indicator};${warning_level};${critical_level};100;0"
    exit ${STATE_CRITICAL}
elif [[ ${current_wearout_indicator} -le ${warning_level} ]]; then
    echo "WARNING: current wear level: ${current_wearout_indicator} | wear_level=${current_wearout_indicator};${warning_level};${critical_level};100;0"
    exit ${STATE_WARNING}
fi

# display message and exit
echo "OK: current wear level: ${current_wearout_indicator} | wear_level=${current_wearout_indicator};${warning_level};${critical_level};100;0"
exit ${STATE_OK}

# vim: ts=4 sw=4 et filetype=sh
