#!/usr/bin/env python
# -*- coding: utf-8 -*-

# import modules
import os
import argparse
import sys
import ConfigParser
import requests
from requests.auth import HTTPBasicAuth
from sys import exit

### START: Variables ###
DEFAULT_TIMEOUT_API = 30
DEFAULT_API_URL = 'http://graylog.pb.local/api/system/notifications'
### END: Variables ###

### START: DEFs ###

### END: DEFs ###


### START: Parse args ###
def parse_args():
    parser = argparse.ArgumentParser(
        description='Search for system notifications in Graylog2 via REST API',
    )
    parser.add_argument(
        '--version',
        action='version',
        version=version
    )
    parser.add_argument(
        '--auth-file',
        type=str,
        help="extra ini-file storing the graylog2 auth info"
    )
    parser.add_argument(
        '--url',
        type=str,
        default=DEFAULT_API_URL,
        help="define the graylog2 api url"
    )
    parser.add_argument(
        '--timeout',
        type=int,
        default=DEFAULT_TIMEOUT_API,
        help="Timeout in communication with the REST API"
    )
    parser.add_argument(
        '--warning',
        type=int,
        required=True,
        help="number of messages to trigger warning"
    )
    parser.add_argument(
        '--critical',
        type=int,
        required=True,
        help="number of messages to trigger critical"
    )

    try:
        args = parser.parse_args()
    except IOError as msg:
        parser.error(str(msg))

    return args
### END: Parse args ###


### Lets rock ###
version = "0.1.0"

if __name__ == '__main__':
    args = parse_args()
    auth_file = args.auth_file
    url = args.url
    timeout = args.timeout
    warning = args.warning
    critical = args.critical

    ### graylog config ###
    config = ConfigParser.RawConfigParser(allow_no_value=False)
    if auth_file:
        filename = os.path.expanduser(auth_file)
    else:
        filename = os.path.expanduser('~/.graylog-api')
    if not os.path.exists(filename):
        print('Config file "{filename}" does not exists!'.format(
            filename=filename,
        ))
        exit(1)
    config.read([filename])

    ### set connection variables ###
    config_section = 'connection'
    try:
        if not url:
            url = config.get(config_section, 'url')
    except Exception as e:
        print('Error: {error}!'.format(
            error=e,
        ))
        exit(1)

    ### set auth variables ###
    config_section = 'auth'
    try:
        user = config.get(config_section, 'user')
        passwd = config.get(config_section, 'password')
    except Exception as e:
        print('Error: {error}!'.format(
            error=e,
        ))
        exit(1)

    ### set headers ###
    headers = {
        'Accept': 'application/json',
    }

    payload = {
    }

    ### make the request ###
    request = requests.get(
        url,
        params=payload,
        headers=headers,
        verify=False,        ### SSL Cert verfification
        auth=HTTPBasicAuth(user, passwd),
    )

    hosts = {}
    json = request.json()
    results = json['total']
    for data in json['notifications']:
        pass

    ### create output ###
    perfdata = ('notification_count={results};{warn};{crit};0;'.format(
        results=results,
        warn=warning,
        crit=critical,
    ))

    if results < warning:
        print ('OK: {count} notifications | {perfdata}'.format(
            count=results,
            perfdata=perfdata,
        ))
        sys.exit(0)
    elif results < critical:
        print ('WARNING: {count} notifications | {perfdata}'.format(
            count=results,
            perfdata=perfdata,
        ))
        sys.exit(1)
    else:
        print ('CRITICAL: {count} notifications | {perfdata}'.format(
            count=results,
            perfdata=perfdata,
        ))
        sys.exit(2)

# vim: ts=4 sw=4 et
