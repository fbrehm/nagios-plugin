#! /usr/bin/python
# vim: fileencoding=utf-8 filetype=python ts=4 et
# -*- coding: utf-8 -*-
# pylint: disable=fixme, line-too-long
"""
@author: Thomas Kroll
@contact: thomas.kroll@profitbricks.com
@copyright: © 2010 - 2016 by Thomas Kroll, Berlin
@summary: Nagios plugin ≡ check script to check the state
          of a BGP propagation
"""

from __future__ import print_function

import os
import sys
import subprocess
import re
import argparse
import shlex

NAGIOS_CODES = {'OK': 0,
                'WARNING': 1,
                'CRITICAL': 2,
                'UNKNOWN': 3}


def main():
    """ main, which runs the code
        and returns the result or UNKNOWN
    """

    parser = argparse.ArgumentParser(
        description='This is a checkscript to compare the birdc6 against '
                    'vhost_gwconf. It do not take any parameter but need '
                    'to be called with "sudo"',
        add_help=True
    )
    parser.parse_args()

    if os.geteuid() != 0:
        nagios_return('UNKNOWN', 'You need to have root privileges. '
                      'Please try again, this time using "sudo". Exiting.')

    result = check_condition()
    if result and 'code' in result and 'message' in result:
        nagios_return(result['code'], result['message'])
    else:
        nagios_return('UNKNOWN', 'check_condition returned unconditionally')


def nagios_return(code, response):
    """ prints the response message
        and exits the script with one
        of the defined exit codes
        DOES NOT RETURN
    """
    print('{}: {}'.format(code, response))
    sys.exit(NAGIOS_CODES[code])


def cmd_run(command):
    env = os.environ
    env["LC_ALL"] = "C"

    cmd_args = shlex.split(command)

    try:
        cmd = subprocess.Popen(cmd_args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env)
        (out, stderr_out) = cmd.communicate()
        if cmd.returncode != 0:
            return cmd.returncode, "%s returned error %s" % (cmd_args[0], stderr_out)
        else:
            return cmd.returncode, out
    except OSError:
        return 2, "%s is not installed" % cmd_args[0]


def check_condition():
    """ check_condition do the comparision between birdc6
        output and vhost_gwconf
    """
    (exit_code, birdc6_output) = cmd_run('birdc6 show route for ::0')

    if exit_code != 0:
        return dict(
            code='UNKNOWN',
            message=birdc6_output
        )
    birdc6_gw_count = len(re.findall(r'ib\d{1}\.dddd', birdc6_output))

    try:
        gwconf_content = open('/proc/ethoip6_vhost_gwconf').read()
    except IOError as err:
        return dict(
            code='UNKNOWN',
            message=("I/O error {} while opening '{}': {}"
                     .format(err.errno, err.filename, err.strerror))
        )
    else:
        gwconf_gw_count = len(re.findall('add_gw_address', gwconf_content))

    if birdc6_gw_count == gwconf_gw_count and birdc6_gw_count >= 2 and gwconf_gw_count >= 2:
        return dict(
            code='OK',
            message=('BGP propagation BIRDC6={} : ETHOIP6={}'
                     .format(birdc6_gw_count, gwconf_gw_count))
        )
    elif birdc6_gw_count == 1 and gwconf_gw_count == 1:
        return dict(
            code='WARNING',
            message=('BGP propagation low only one gateway left. BIRDC6={}, ETHOIP6={}'
                     .format(birdc6_gw_count, gwconf_gw_count))
        )
    elif birdc6_gw_count != gwconf_gw_count or birdc6_gw_count == 0 or gwconf_gw_count == 0:
        return dict(
            code='CRITICAL',
            message=('Mismatch in BGP propagation between BIRDC6={} and ETHOIP6={}'
                     .format(birdc6_gw_count, gwconf_gw_count))
        )


if __name__ == '__main__':
    main()
