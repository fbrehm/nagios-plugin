#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import sys
import json
import requests


# config
RETVAL = {
    'OK': 0,
    'WARNING': 1,
    'CRITICAL': 2,
    'UNKNOWN': 3,
}
URL = 'http://{host}:9200/_cluster/health'


def get_args():
    parser = argparse.ArgumentParser(
        description='Check graylog\'s elasticsearch cluster state.'
    )

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s 0.1',
        help='Show version'
    )

    parser.add_argument(
        '-H', '--host',
        default="localhost",
        help='Graylog host, default: localhost'
    )

    return parser.parse_args()


def print_json_dump(json_data=False):
    print(
        json.dumps(
            json_data,
            sort_keys=True,
            indent=4,
        )
    )


def get_json_data(url=None):
    # set headers
    headers = {
        'Accept': 'application/json',
    }
    # no payload needed
    payload = {}
    # make the request
    try:
        r = requests.get(
            url,
            params=payload,
            headers=headers,
            verify=False,
        )
    except Exception as e:
        state = 'UNKNOWN'
        sys.stderr.write('{state}: Error retrieving "{url}": {error}\n'.format(
            state=state,
            url=url,
            error=e,
        ))
        sys.exit(RETVAL[state])

    # check for http response code
    if not r.status_code == 200:
        state = 'UNKONWN'
        sys.stderr.write('{state}: HTTP response code for "{url}": {code}\n'.format(
            state=state,
            url=url,
            code=r.status_code,
        ))

    # check if valid json data are returned
    try:
        json = r.json()
    except Exception as error:
        state = 'UNKNOWN'
        sys.stderr.write('{state}: No json data found in "{url}": {error}\n'.format(
            state=state,
            url=url,
            error=error,
        ))
        sys.exit(RETVAL[state])

    return json


if __name__ == '__main__':
    args = get_args()
    url = URL.format(
        host=args.host
    )
    # data looks like
    # {
    #     cluster_name: "graylog2",
    #     status: "green",
    #     timed_out: false,
    #     number_of_nodes: 5,
    #     number_of_data_nodes: 3,
    #     active_primary_shards: 71,
    #     active_shards: 142,
    #     relocating_shards: 0,
    #     initializing_shards: 0,
    #     unassigned_shards: 0
    # }
    data = get_json_data(url)
    if data['status'] == 'green':
        state = 'OK'
    elif data['status'] == 'yellow':
        state = 'WARNING'
    elif data['status'] == 'red':
        state = 'CRITICAL'

    # generate message
    message = '{state}: status is {e_state}'.format(
        state=state,
        e_state=data['status'],
    )
    if (data['relocating_shards'] > 0) or (data['initializing_shards'] > 0) or (data['unassigned_shards'] > 0):
        message += ' - '
        for metric in ['relocating_shards', 'initializing_shards', 'unassigned_shards']:
            if data[metric] > 0:
                message += '{num} {m}'.format(
                    num=data[metric],
                    m=metric.replace('_', ' ')
                )

    # generate performance data
    message += '|'
    for metric in ['number_of_nodes', 'number_of_data_nodes',
                   'active_primary_shards', 'active_shards',
                   'relocating_shards', 'initializing_shards',
                   'unassigned_shards']:
        message += '{m}={num} '.format(
            m=metric,
            num=data[metric],
        )

    # finally print message and exit
    print(message)
    sys.exit(RETVAL[state])


# vim: fileencoding=utf-8 filetype=python ts=4 et
