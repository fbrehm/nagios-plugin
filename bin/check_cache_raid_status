#!/bin/bash
IFS=$','


full_status=$(storcli /c0 /vall show)
data=$(echo $full_status | grep -i data)
data_n=$(echo $full_status | grep -ic data)
cache=$(echo $full_status | egrep -v 'OffLine|TYPE|Always' |grep -i cache)
cache_n=$(echo $full_status | egrep -v 'OffLine|TYPE|Always' |grep -ic cache)
os=$(echo $full_status | grep -i os)
os_n=$(echo $full_status | grep -ic os)
status_data=RWBD
status_cache=NRWBD
status_os=NRWTD


check_state()
{
if `echo $full_status | grep -q Success` 
    then
        if [ $data_n -gt 0 -a $cache_n -gt 0 ]
            then
                if [ $os_n -gt 0 ] 
                      then
                              if `echo $full_status | grep -q 'RAID1\b'`
                                  then
                                        check_state_raid1
                              fi
                      elif `echo $full_status | grep -q 'RAID10\b'`
                            then
                                check_state_raid10
                            else
                                echo "UNKNOWN: VD's are not named correctly"
                                exit 3
                fi
             else     
                echo "UNKNOWN: VD's are not named correctly"
                exit 3

        fi
    else
        echo "UNKNOWN: check permissions (run with sudo) or check controller state"
        exit 3
fi
}

check_state_raid1()
{
status=0
print_data="OK: DATA status: `echo $status_data`"
print_cache="OK: CACHE status: `echo $status_cache`"
print_os="OK: OS status: `echo $status_os`"

for a in $data
    do
        if `echo $a |grep -vq $status_data'\b'`
            then
	            print_data=$(echo -n "CRITICAL: " `echo $a |grep -vc $status_data'\b'` "VD\(\'s\) from DATA in " `echo $a |grep -v $status_data'\b'| awk '{print $6}'| uniq` "(it should be" $status_data") ")
	            status=2
                printst[0]=$(echo $print_data)
        fi
done 

for b in $cache
    do	
        if `echo $b | grep -vq $status_cache'\b'`
            then
                print_cache=$(echo -n "CRITICAL: " `echo $b |grep -vc $status_cache'\b'` "VD\(\'s\) from CACHE in " `echo $b |grep -v $status_cache'\b'| awk '{print $6}'| uniq` "(should be" $status_cache") ")
	            status=2
                printst[1]=$(echo $print_cache)	
        fi
done

for c in $os
    do
        if `echo $c |grep -vq $status_os'\b'`
            then
                print_os=$(echo -n "CRITICAL: " `echo $c |grep -vc $status_os'\b'` "VD\(\'s\) from OS in " `echo $c |grep -v $status_os'\b'| awk '{print $6}'| uniq` "(should be" $status_os") ")
		        status=2
                printst[2]=$(echo $print_os)
        fi
done


if [ "$status" = "2" ]
	then
	    echo -n ${printst[@]} | xargs
	    exit $status
	else
	    echo -n $print_data $print_cache $print_os | xargs
	    exit $status
fi

}


check_state_raid10()
{
status=0
print_data[1]="OK: DATA status: `echo $status_data`"
print_cache[1]="OK: CACHE status: `echo $status_cache`"

for a in $data
    do 
        if `echo $a |grep -vq $status_data'\b'` 
            then
                print_data=$(echo -n "CRITICAL: " `echo $a |grep -vc $status_data'\b'` "VD\(\'s\) from DATA in " `echo $a |grep -v $status_data'\b'| awk '{print $6}'| uniq` "(it should be" $status_data") ")
                status=2
                printst[0]=$(echo $print_data)
        fi
done 


for b in $cache
    do  
        if `echo $b | grep -vq $status_cache'\b'`
            then       
                print_cache=$(echo -n "CRITICAL: " `echo $b |grep -vc $status_cache'\b'` "VD\(\'s\) from CACHE in " `echo $b |grep -v $status_cache'\b'| awk '{print $6}'| uniq` "(should be" $status_cache") ")
                status=2
                printst[1]=$(echo $print_cache) 
        fi
done


if [ "$status" = "2" ]
    then
        echo -n ${print_data[@]} ${print_cache[@]} | xargs
        exit $status
    else
        echo -n ${print_data[@]} ${print_cache[@]} | xargs
        exit $status
fi

}



print_visable_data()
{
for a in $data
    do

        if `echo $a |grep -vq $status_data'\b'`
            then
                echo "CRITICAL: DATA - correct status is" $status_data
                echo "DG/VD:"
                echo $a |grep -v $status_data'\b' | awk '{print $1,"Cache state",$6,"is wrong"}'
            else
		        echo  "OK: DATA"
    	fi
done
}

print_visable_cache()
{
for b in $cache
    do
        if `echo $b | grep -vq $status_cache'\b'`
            then       
                echo "CRITICAL: Cache - correct status is" $status_cache
                echo "DG/VD:"
                echo $b |grep -v $status_cache'\b' | awk '{print $1,"Cache state",$6,"is wrong"}'
            else
                echo "OK: Cache"
        fi
done
}

print_visable_os()
{
for c in $os
    do
        if `echo $c |grep -vq $status_os'\b'`
            then
                echo "CRITICAL: OS - correct status is" $status_os
                echo "DG/VD:"
                echo $c |grep -v $status_os'\b' | awk '{print $1,"Cache state",$6,"is wrong"}'
            else
                echo "OK: OS"
        fi
done
}


print_visable()
{
if `echo $full_status | grep -q 'RAID1\b'`
    then
        print_visable_data
        print_visable_cache
        print_visable_os
        exit 0        
    else
        print_visable_cache
        print_visable_data
        exit 0
fi
}


print_help()
{

    cat <<EOF

	This plugin checks status of Cache in RAID1 and RAID10 using storcli.

$0:
        -h | --help             Print help
        -v | --visable 		Show full output

EOF

    exit -1
}

## Parse parameters
while [ $# -ge 0 ]; do
    case "$1" in
        -h | --help)
            print_help
            exit 0
            ;;
        -v | --visable)
                print_visable
                exit 0
                ;;
        *)
            check_state
            ;;
        esac
    shift
done

